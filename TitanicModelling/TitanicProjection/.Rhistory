training_data2 <- Titanic_Raw[sample(nrow(Titanic_Raw), 800), ]
training_data_ids <- training_data2$PassengerId
Titanic_Raw = read_csv("Titanic_Raw.csv")
Titanic_Raw = read.csv("Titanic_Raw.csv")
training_data2 <- Titanic_Raw[sample(nrow(Titanic_Raw), 800), ]
training_data_ids <- training_data2$PassengerId
print(training_data_ids)
orig_data_ids <- Titanic_Raw$PassengerId
library(readr)
Titanic_Raw <- read_csv("~/Desktop/TitanicModelling/TitanicProjection/Titanic_Raw.csv",
na = "null")
View(Titanic_Raw)
training_data2 <- Titanic_Raw[sample(nrow(Titanic_Raw), 800), ]
training_data2 <- Titanic_Raw[sample(nrow(Titanic_Raw), 800), ]
i <- i + 1
testing_data_ids <- vector("list", 91)
print(testing_data_ids)
i <- 1
for (id in orig_data_ids) {
if (!(id %in% training_data_ids)) {
testing_data_ids[[i]] <- id
i <- i + 1
}
}
print(testing_data_ids)
testing_data <- subset(Titanic_Raw, id %in% orig_data_ids)
print(testing_data)
testing_data <- subset(Titanic_Raw, id %in% testing_data_ids)
print(testing_data)
testing_data2 <- subset(Titanic_Raw, id %in% testing_data_ids)
View(testing_data)
print(testing_data2)
testing_data3 <- subset(Titanic_Raw, id %in% testing_data_ids)
print(testing_data3)
testing_data4 <- subset(Titanic_Raw, PassengerId %in% testing_data_ids)
print(testing_data4)
View(testing_data4)
lrModel <- glm(Survived ~ ., data = training_data2, family = "gaussian")
summary_model <- summary(lrModel)
print(summary_model)
predictions <- predict(lrModel, newData = testData)
display(select(predictions, "price", "prediction"))
install.packages("Amelia")
library("Amelia", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(Amelia)
missmap(training.data.raw, main = "Missing values vs observed")
missmap(training_data2, main = "Missing values vs observed")
View(training_data2)
View(training_data2)
is.na(data) <- data==''
is.na(training_data2) <- training_data2==''
missmap(training_data2, main = "Missing values vs observed")
is.na(testing_data4) <- testing_data4==''
print(training_data2)
View(training_data2)
missmap(training_data3, main = "Missing values vs observed")
is.na(testing_data4) <- testing_data4==''
training_data3 <- subset(training_data2,select=c(2,3,5,6,7,8,10,12))
library(Amelia)
missmap(training_data3, main = "Missing values vs observed")
model <- glm(Survived ~.,family=binomial(link='logit'),data=training_data3)
summary(model)
anova(model, test="Chisq")
misClasificError <- mean(fitted.results != testing_data4$Survived)
fitted.results <- predict(model,newdata=subset(testing_data4,select=c(2,3,4,5,6,7,8)),type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing_data4$Survived)
print(paste('Accuracy',1-misClasificError))
fitted.results <- predict(model,newdata=testing_data5,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
testing_data5 <- subset(testing_data4,select=c(2,3,4,5,6,7,8))
fitted.results <- predict(model,newdata=testing_data5,type='response')
fitted.results <- predict(model,testing_data5,type='response')
testing_data5 <- subset(testing_data4,select=c(2,3,4,5,6,7,8,10,12))
fitted.results <- predict(model,testing_data5,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing_data4$Survived)
print(paste('Accuracy',1-misClasificError))
model <- glm(Survived ~.,family=binomial(link='logit'),data=training_data3)
summary_model <- summary(model)
testing_data5 <- subset(testing_data4,select=c(2,3,4,5,6,7,8,10,12))
fitted.results <- predict(model,testing_data5,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing_data4$Survived)
print(paste('Accuracy',1-misClasificError))
Titanic_Raw$Age[is.na(Titanic_Raw$Age)] <- mean(Titanic_Raw$Age,na.rm=T)
training_data2 <- Titanic_Raw[sample(nrow(Titanic_Raw), 800), ]
training_data_ids <- training_data2$PassengerId
orig_data_ids <- Titanic_Raw$PassengerId
testing_data_ids <- vector("list", 91)
i <- 1
for (id in orig_data_ids) {
if (!(id %in% training_data_ids)) {
testing_data_ids[[i]] <- id
i <- i + 1
}
}
testing_data4 <- subset(Titanic_Raw, PassengerId %in% testing_data_ids)
is.na(training_data3) <- training_data3==''
is.na(testing_data4) <- testing_data4==''
training_data3 <- subset(training_data2,select=c(2,3,5,6,7,8,10,12))
library(Amelia)
missmap(training_data3, main = "Missing values vs observed")
model <- glm(Survived ~.,family=binomial(link='logit'),data=training_data3)
summary_model <- summary(model)
testing_data5 <- subset(testing_data4,select=c(2,3,4,5,6,7,8,10,12))
fitted.results <- predict(model,testing_data5,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing_data4$Survived)
print(paste('Accuracy',1-misClasificError))
print(paste('Accuracy',1-misClasificError))
Titanic_Raw$Age[is.na(Titanic_Raw$Age)] <- mean(Titanic_Raw$Age,na.rm=T)
training_data2 <- Titanic_Raw[sample(nrow(Titanic_Raw), 800), ]
training_data_ids <- training_data2$PassengerId
orig_data_ids <- Titanic_Raw$PassengerId
testing_data_ids <- vector("list", 91)
i <- 1
for (id in orig_data_ids) {
if (!(id %in% training_data_ids)) {
testing_data_ids[[i]] <- id
i <- i + 1
}
}
testing_data4 <- subset(Titanic_Raw, PassengerId %in% testing_data_ids)
training_data3 <- subset(training_data2,select=c(2,3,5,6,7,8,10,12))
testing_data5 <- subset(testing_data4,select=c(2,3,4,5,6,7,8,10,12))
is.na(training_data3) <- training_data3==''
is.na(testing_data4) <- testing_data4==''
model <- glm(Survived ~.,family=binomial(link='logit'),data=training_data3)
summary_model <- summary(model)
fitted.results <- predict(model,testing_data5,type='response')
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != testing_data4$Survived)
print(paste('Accuracy',1-misClasificError))
training_data_ids <- training_data2$PassengerId
orig_data_ids <- Titanic_Raw$PassengerId
testing_data_ids <- vector("list", 91)
i <- 1
for (id in orig_data_ids) {
if (!(id %in% training_data_ids)) {
testing_data_ids[[i]] <- id
i <- i + 1
}
}
testing_data4 <- subset(Titanic_Raw, PassengerId %in% testing_data_ids)
training_data3 <- subset(training_data2,select=c(2,3,5,6,7,8,10,12))
testing_data5 <- subset(testing_data4,select=c(2,3,4,5,6,7,8,10,12))
is.na(training_data3) <- training_data3==''
is.na(testing_data4) <- testing_data4==''
model <- glm(Survived ~.,family=binomial(link='logit'),data=training_data3)
summary_model <- summary(model)
fitted.results <- predict(model,testing_data5,type='response')
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != testing_data4$Survived)
print(paste('Accuracy',1-misClasificError))
Titanic_Raw$Age[is.na(Titanic_Raw$Age)] <- mean(Titanic_Raw$Age,na.rm=T)
training_data2 <- Titanic_Raw[sample(nrow(Titanic_Raw), 800), ]
training_data_ids <- training_data2$PassengerId
orig_data_ids <- Titanic_Raw$PassengerId
testing_data_ids <- vector("list", 91)
i <- 1
for (id in orig_data_ids) {
if (!(id %in% training_data_ids)) {
testing_data_ids[[i]] <- id
i <- i + 1
}
}
testing_data4 <- subset(Titanic_Raw, PassengerId %in% testing_data_ids)
training_data3 <- subset(training_data2,select=c(2,3,5,6,7,8,10,12))
testing_data5 <- subset(testing_data4,select=c(2,3,4,5,6,7,8,10,12))
is.na(training_data3) <- training_data3==''
is.na(testing_data4) <- testing_data4==''
model <- glm(Survived ~.,family=binomial(link='logit'),data=training_data3)
summary_model <- summary(model)
fitted.results <- predict(model,testing_data5,type='response')
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != testing_data4$Survived)
print(paste('Accuracy',1-misClasificError))
